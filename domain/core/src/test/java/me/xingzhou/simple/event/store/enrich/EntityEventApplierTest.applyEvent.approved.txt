LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=TestEvent[id=event-id], details=RecordDetails[streamName=StreamName[value=test-aggregate-id], version=Version[value=0], recordId=RecordId[id=1], insertedOn=[Date1]]], TestAggregate{id='test-aggregate-id', appliedEvents=[TestEvent[id=event-id]]}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=TestEvent[id=event-id], details=RecordDetails[streamName=StreamName[value=test-aggregate-id], version=Version[value=0], recordId=RecordId[id=1], insertedOn=[Date1]]], ProjectionRecorder{appliedEvents=[TestEvent[id=event-id]]}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=TestEvent[id=null], details=RecordDetails[streamName=StreamName[value=test-aggregate-id], version=Version[value=0], recordId=RecordId[id=1], insertedOn=[Date2]]], TestAggregate{id='test-aggregate-id', appliedEvents=[TestEvent[id=null]]}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=TestEvent[id=event-id], details=RecordDetails[streamName=StreamName[value=test-aggregate-id], version=Version[value=0], recordId=RecordId[id=1], insertedOn=[Date3]]], TestAggregate{id='test-aggregate-id', appliedEvents=[TestEvent[id=event-id], TestEvent[id=event-id]]}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=TestEvent[id=event-id], details=RecordDetails[streamName=StreamName[value=test-aggregate-id], version=Version[value=1], recordId=RecordId[id=2], insertedOn=[Date4]]], TestAggregate{id='test-aggregate-id', appliedEvents=[TestEvent[id=event-id], TestEvent[id=event-id]]}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=TestEvent[id=event-id], details=RecordDetails[streamName=StreamName[value=test-aggregate-id], version=Version[value=0], recordId=RecordId[id=1], insertedOn=[Date3]]], ProjectionRecorder{appliedEvents=[TestEvent[id=event-id], TestEvent[id=event-id]]}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=TestEvent[id=event-id], details=RecordDetails[streamName=StreamName[value=test-aggregate-id], version=Version[value=1], recordId=RecordId[id=2], insertedOn=[Date4]]], ProjectionRecorder{appliedEvents=[TestEvent[id=event-id], TestEvent[id=event-id]]}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=TestEvent[id=null], details=RecordDetails[streamName=StreamName[value=test-aggregate-id], version=Version[value=0], recordId=RecordId[id=1], insertedOn=[Date5]]], TestAggregate{id='test-aggregate-id', appliedEvents=[TestEvent[id=null]]}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=TestEvent[id=null], details=RecordDetails[streamName=StreamName[value=test-aggregate-id], version=Version[value=0], recordId=RecordId[id=1], insertedOn=[Date6]]], TestAggregate{id='test-aggregate-id', appliedEvents=[TestEvent[id=null]]}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=TestEvent[id=event-id], details=RecordDetails[streamName=StreamName[value=test-aggregate-id], version=Version[value=0], recordId=RecordId[id=1], insertedOn=[Date7]]], TestAggregate{id='test-aggregate-id', appliedEvents=[TestEvent[id=event-id]]}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=TestEvent[id=event-id], details=RecordDetails[streamName=StreamName[value=test-aggregate-id], version=Version[value=0], recordId=RecordId[id=1], insertedOn=[Date7]]], TestAggregate{id='test-aggregate-id', appliedEvents=[TestEvent[id=event-id]]}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.events.TestEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=HierarchyEventWithInterfaces{}, details=RecordDetails[streamName=StreamName[value=stream-name], version=Version[value=0], recordId=RecordId[id=0], insertedOn=[Date8]]], EventAppliedRecorder{}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$HierarchyEventWithInterfaces]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=HierarchyEventWithInterfaces{}, details=RecordDetails[streamName=StreamName[value=stream-name], version=Version[value=0], recordId=RecordId[id=0], insertedOn=[Date8]]], BaseHierarchyEventAppliedRecorder{eventTypeApplied=true}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$HierarchyEventWithInterfaces]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$BaseHierarchyEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$BaseHierarchyEvent]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=HierarchyEventWithInterfaces{}, details=RecordDetails[streamName=StreamName[value=stream-name], version=Version[value=0], recordId=RecordId[id=0], insertedOn=[Date8]]], TestEventInterfaceAEventAppliedRecorder{eventTypeApplied=true}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$HierarchyEventWithInterfaces]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$TestEventInterfaceA]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$TestEventInterfaceA]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=HierarchyEventWithInterfaces{}, details=RecordDetails[streamName=StreamName[value=stream-name], version=Version[value=0], recordId=RecordId[id=0], insertedOn=[Date8]]], TestEventInterfaceBEventAppliedRecorder{eventTypeApplied=true}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$HierarchyEventWithInterfaces]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$TestEventInterfaceB]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$TestEventInterfaceB]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=HierarchyEventWithInterfaces{}, details=RecordDetails[streamName=StreamName[value=stream-name], version=Version[value=0], recordId=RecordId[id=0], insertedOn=[Date8]]], HierarchyEventWithInterfacesEventAppliedRecorder{eventTypeApplied=true}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$HierarchyEventWithInterfaces]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$HierarchyEventWithInterfaces]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, class me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$HierarchyEventWithInterfaces]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=HierarchyEventWithInterfaces{}, details=RecordDetails[streamName=StreamName[value=stream-name], version=Version[value=0], recordId=RecordId[id=0], insertedOn=[Date8]]], SubRecorder{eventTypeApplied=true}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$HierarchyEventWithInterfaces]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='apply {} to entity {}', arguments=[EventRecord[event=HierarchyEventWithInterfaces{}, details=RecordDetails[streamName=StreamName[value=stream-name], version=Version[value=0], recordId=RecordId[id=0], insertedOn=[Date8]]], EventWithRecordDetailsRecorder{recordedDetails=RecordDetails[streamName=StreamName[value=stream-name], version=Version[value=0], recordId=RecordId[id=0], insertedOn=[Date8]], eventTypeApplied=true}]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find the first parameter of the first {}(<? extends {}>) method', arguments=[apply, class me.xingzhou.simple.event.store.enrich.EntityEventApplierTest$HierarchyEventWithInterfaces]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='unable to find method {}({})', arguments=[apply, interface me.xingzhou.simple.event.store.Event]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to find public method {}({}, {})', arguments=[apply, interface me.xingzhou.simple.event.store.Event, class me.xingzhou.simple.event.store.RecordDetails]}
LoggingEvent{level=DEBUG, mdc={}, markers=[], keyValuePairs=[], throwable=Optional.empty, message='attempting to invoke method {}({}, {})', arguments=[apply, interface me.xingzhou.simple.event.store.Event, class me.xingzhou.simple.event.store.RecordDetails]}
